// Decompiled by Jad v1.5.8e2. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://kpdus.tripod.com/jad.html
// Decompiler options: packimports(3) 

package com.ibm.as400ad.webfacing.convert.gen.dhtml;

import com.ibm.as400ad.code400.designer.io.OutputCollection;
import com.ibm.as400ad.code400.dom.FieldNode;
import com.ibm.as400ad.code400.dom.RecordNode;
import com.ibm.as400ad.code400.dom.constants.ENUM_FieldUsage;
import com.ibm.as400ad.webfacing.common.PaddedStringBuffer;
import com.ibm.as400ad.webfacing.common.Version;
import com.ibm.as400ad.webfacing.convert.IFieldOutput;
import com.ibm.as400ad.webfacing.convert.IFieldOutputVisitor;
import com.ibm.as400ad.webfacing.convert.model.*;
import java.util.Date;
import java.util.Iterator;

// Referenced classes of package com.ibm.as400ad.webfacing.convert.gen.dhtml:
//            ClientScriptSourceCodeCollection

public class ClientScriptJSPVisitor
    implements IFieldOutputVisitor, ENUM_FieldUsage
{

    public ClientScriptJSPVisitor()
    {
    }

    public ClientScriptJSPVisitor(RecordLayout recordlayout, ClientScriptSourceCodeCollection clientscriptsourcecodecollection)
    {
        _rn = recordlayout.getRecordNode();
        _rl = recordlayout;
        _scc = clientscriptsourcecodecollection;
    }

    public void addElement(Object obj)
    {
        _scc.addElement(obj);
    }

    public boolean fieldHasOutput(IFieldOutput ifieldoutput)
    {
        char c = ifieldoutput.getFieldNode().getFieldUsage();
        return c == 'B' || c == 'I' || (ifieldoutput instanceof OutputFieldOutput) || (ifieldoutput instanceof MsgDataFieldOutput);
    }

    public String getBeanName()
    {
        return _rl.getRecordNode().getBeanName();
    }

    public IFieldOutput getFieldOutput(FieldOnRow fieldonrow)
    {
        return fieldonrow.getFieldOutput();
    }

    public RecordLayout getRecordLayout()
    {
        return _rl;
    }

    public boolean isControlBeforeSubfiles()
    {
        return true;
    }

    public void printBeginningLines()
    {
        _scc.addElement("<% /* Generated by WebFacing - WebSphere Development Studio Client for iSeries " + Version.getVersionDTStamp() + " on " + new Date() + " */ %>");
        RecordNode recordnode = _rl.getRecordNode();
        String s = recordnode.getBeanClassName();
        _scc.addElement("<%@ page contentType=\"text/html;charset=UTF-8\" %>");
        PaddedStringBuffer paddedstringbuffer = new PaddedStringBuffer(80);
        paddedstringbuffer.concat("<jsp:useBean id='", recordnode.getBeanName(), "' scope='request' type=\"", _rl.getViewInterface(), "\" />");
        _scc.addElement(paddedstringbuffer);
        _scc.addElement("<% final int zOrder = " + _rn.getBeanName() + ".getDisplayZIndex(); %>");
        if(_rl.recordHasSLNOVAR())
            _scc.addElement("<% final int slnoOffset = " + _rn.getBeanName() + ".getSLNOVAROffset(); %>");
    }

    public void printEndingLines()
    {
        printScriptFromWebSetting();
    }

    private void printScriptFromWebSetting()
    {
        _scc.addElement(_rl.getScriptFromWebSetting());
    }

    public boolean processBeginOfRow(RecordLayoutRow recordlayoutrow)
    {
        return true;
    }

    public void processBeginOfSubfiles()
    {
    }

    public void processBeginOfTraversal()
    {
        IFieldOutput ifieldoutput;
        for(Iterator iterator = getRecordLayout().getScriptableInvisibleFields(); iterator.hasNext(); _scc.addAll(ifieldoutput.getClientScript()))
            ifieldoutput = (IFieldOutput)iterator.next();

    }

    public void processEndOfRow(RecordLayoutRow recordlayoutrow)
    {
    }

    public void processEndOfSubfiles()
    {
    }

    public void processEndOfTraversal()
    {
    }

    public void processFieldOnRow(boolean flag, FieldOnRow fieldonrow)
    {
        if(!fieldonrow.isFirstElementRow())
            return;
        if(fieldHasOutput(fieldonrow.getFieldOutput()))
        {
            IFieldOutput ifieldoutput = getFieldOutput(fieldonrow);
            if(flag)
                addElement("<% if (" + ifieldoutput.getIsFieldVisibleCall() + ") { %>");
            _scc.addElement(ifieldoutput.getClientScript());
            if(flag)
                addElement("<% } %>");
        }
    }

    public void insertHeader()
    {
    }

    protected RecordLayout _rl;
    protected RecordNode _rn;
    protected ClientScriptSourceCodeCollection _scc;
}
