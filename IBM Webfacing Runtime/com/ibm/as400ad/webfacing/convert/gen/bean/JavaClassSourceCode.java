// Decompiled by Jad v1.5.8e2. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://kpdus.tripod.com/jad.html
// Decompiler options: packimports(3) 

package com.ibm.as400ad.webfacing.convert.gen.bean;

import com.ibm.as400ad.code400.designer.io.OutputCollection;
import com.ibm.as400ad.webfacing.common.Version;
import com.ibm.as400ad.webfacing.convert.gen.WebResourceFileWriter;
import java.io.IOException;
import java.util.*;

// Referenced classes of package com.ibm.as400ad.webfacing.convert.gen.bean:
//            JavaSourceCodeCollection, JavaMethodSourceCode, JavaFieldSourceCode

public class JavaClassSourceCode extends JavaSourceCodeCollection
{

    public JavaClassSourceCode(String s, String s1)
    {
        _className = null;
        _packageName = null;
        _imports = new Vector();
        _classToExtend = null;
        _interfacesToImplement = new Vector();
        _fields = new Vector();
        _methods = new Hashtable();
        _className = s;
        _packageName = s1;
    }

    public void addClassExtension(String s)
    {
        _classToExtend = s;
    }

    public void addConstructor(String s, JavaSourceCodeCollection javasourcecodecollection)
    {
        JavaMethodSourceCode javamethodsourcecode = new JavaMethodSourceCode(_className, s, javasourcecodecollection);
        _methods.put(":" + s, javamethodsourcecode);
    }

    public void addField(JavaFieldSourceCode javafieldsourcecode)
    {
        _fields.add(javafieldsourcecode);
    }

    public void addImport(String s)
    {
        _imports.add(s);
    }

    public void addInterface(String s)
    {
        _interfacesToImplement.add(s);
    }

    public void addMethod(JavaMethodSourceCode javamethodsourcecode)
    {
        _methods.put(javamethodsourcecode.getName() + ":" + javamethodsourcecode.getParameters(), javamethodsourcecode);
    }

    JavaSourceCodeCollection generate()
    {
        JavaSourceCodeCollection javasourcecodecollection = new JavaSourceCodeCollection();
        generateFileComment(javasourcecodecollection);
        generatePackageName(javasourcecodecollection);
        generateImports(javasourcecodecollection);
        generateClassStatement(javasourcecodecollection);
        generateFields(javasourcecodecollection);
        generateMethods(javasourcecodecollection);
        generateClassFooter(javasourcecodecollection);
        return javasourcecodecollection;
    }

    protected void generateClassFooter(JavaSourceCodeCollection javasourcecodecollection)
    {
        javasourcecodecollection.addElement(getNewline() + "} // end of class definition");
    }

    protected void generateClassStatement(JavaSourceCodeCollection javasourcecodecollection)
    {
        StringBuffer stringbuffer = new StringBuffer();
        stringbuffer.append("public class " + _className);
        if(_classToExtend != null)
            stringbuffer.append(" extends " + _classToExtend);
        if(!_interfacesToImplement.isEmpty())
        {
            stringbuffer.append(" implements " + _interfacesToImplement.get(0));
            for(int i = 1; i < _interfacesToImplement.size(); i++)
                stringbuffer.append(", " + _interfacesToImplement.get(i));

        }
        stringbuffer.append(getNewline() + "{");
        javasourcecodecollection.addLine(stringbuffer.toString());
    }

    protected void generateFields(JavaSourceCodeCollection javasourcecodecollection)
    {
        for(Iterator iterator = _fields.iterator(); iterator.hasNext(); javasourcecodecollection.addElement((JavaFieldSourceCode)iterator.next()));
    }

    protected void generateFileComment(JavaSourceCodeCollection javasourcecodecollection)
    {
        javasourcecodecollection.addElement("/* Generated by IBM Webfacing " + Version.getVersionDTStamp() + " on " + new Date() + " */" + getNewline());
    }

    protected void generateImports(JavaSourceCodeCollection javasourcecodecollection)
    {
        for(int i = 0; i < _imports.size(); i++)
            javasourcecodecollection.addElement("import " + _imports.get(i) + ";");

        javasourcecodecollection.addElement("");
    }

    protected void generateMethods(JavaSourceCodeCollection javasourcecodecollection)
    {
        for(Enumeration enumeration = _methods.elements(); enumeration.hasMoreElements(); javasourcecodecollection.addElement((JavaMethodSourceCode)enumeration.nextElement()));
    }

    protected void generatePackageName(JavaSourceCodeCollection javasourcecodecollection)
    {
        javasourcecodecollection.addElement("package " + _packageName + ";" + getNewline());
    }

    public JavaMethodSourceCode getMethod(String s, String s1)
    {
        return (JavaMethodSourceCode)_methods.get(s + ":" + s1);
    }

    public String toString()
    {
        return generate().toString();
    }

    public void write(WebResourceFileWriter webresourcefilewriter)
        throws IOException
    {
        webresourcefilewriter.writeSourceToFile(generate(), _className, ".java");
    }

    static final String copyRight = new String(" (C) Copyright IBM Corporation 1999, 2000");
    private String _className;
    private String _packageName;
    private Vector _imports;
    private String _classToExtend;
    private Vector _interfacesToImplement;
    private Vector _fields;
    private Hashtable _methods;
    private static final String JAVA_FILE_TYPE = ".java";
    static final String METHOD_NAME_SEPARATOR = ":";

}
