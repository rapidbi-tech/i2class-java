// Decompiled by Jad v1.5.8e2. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://kpdus.tripod.com/jad.html
// Decompiler options: packimports(3) 

package com.ibm.as400ad.webfacing.convert.gen.bean;

import com.ibm.as400ad.code400.designer.io.OutputCollection;
import com.ibm.as400ad.code400.dom.*;
import com.ibm.as400ad.code400.dom.constants.*;
import com.ibm.as400ad.webfacing.common.Version;
import com.ibm.as400ad.webfacing.common.WebfacingConstants;
import com.ibm.as400ad.webfacing.convert.*;
import com.ibm.as400ad.webfacing.convert.gen.WebResourceFileWriter;
import com.ibm.as400ad.webfacing.convert.model.*;
import com.ibm.as400ad.webfacing.convert.rules.DefaultCommandKeyLabelListCreater;
import com.ibm.as400ad.webfacing.convert.rules.EditCodeMappingHandler;
import com.ibm.as400ad.webfacing.runtime.controller.XMLRecordBeanConstants;
import com.ibm.as400ad.webfacing.runtime.view.CommandKeyLabelList;
import com.ibm.as400ad.webfacing.runtime.view.def.*;
import com.ibm.etools.iseries.webfacing.convert.external.IRawWebSetting;
import java.io.IOException;
import java.util.*;

// Referenced classes of package com.ibm.as400ad.webfacing.convert.gen.bean:
//            KeyLabelsInPropertyFile, XMLSourceCodeCollection, XMLComment, XMLElement, 
//            KeySequence, ResponseIndicatorList, ReferencedAIDKey, IXMLComponent

public class XMLDefinitionGenerator
    implements IWebResourceGenerator, ENUM_KeywordIdentifiers, ENUM_KeywordParmType, XMLRecordBeanConstants
{

    public XMLDefinitionGenerator(RecordLayout recordlayout, WebResourceFileWriter webresourcefilewriter)
    {
        _rn = null;
        _recLayout = null;
        _fileWriter = null;
        _fileNode = null;
        _responseIndicators = null;
        _optionIndicators = null;
        _inputFieldLengthAccumulator = 0L;
        _outputFieldLengthAccumulator = 0L;
        _defaultCommandKeyLabelList = null;
        _definedKeyLabelList = null;
        _visibilityCondtionedKeyLabelList = new CommandKeyLabelList();
        _visibleCommandKeyLabelList = new CommandKeyLabelList();
        _indicatorConditionedKeyLabelList = new CommandKeyLabelList();
        _keyLabelsInPropertyFile = new KeyLabelsInPropertyFile();
        _recLayout = recordlayout;
        _rn = recordlayout.getRecordNode();
        _fileWriter = webresourcefilewriter;
        _defaultCommandKeyLabelList = DefaultCommandKeyLabelListCreater.getDefaultCMDKeyLabelListCreater().getDefaultCommandKeyLabelList();
        _definedKeyLabelList = getMergedCommandKeyLabelList(getCommandKeyLabelListFromNode(getRecordNode()), getCommandKeyLabelListFromNode(getFileNode()));
    }

    public void generate()
        throws IOException
    {
        String s = getBeanName();
        XMLSourceCodeCollection xmlsourcecodecollection = new XMLSourceCodeCollection(s, getFileNode().getPackageName());
        try
        {
            xmlsourcecodecollection.addElement(new XMLComment("Generated by IBM Webfacing " + Version.getVersionDTStamp() + " on " + new Date()));
            xmlsourcecodecollection.addElement(generateRecordElement());
        }
        catch(Throwable throwable)
        {
            getRecordNode().logEvent(8);
            ExportHandler.err(1, throwable, "Error generating record definition for " + getBeanName() + " = " + throwable);
        }
        try
        {
            xmlsourcecodecollection.write(getFileWriter());
        }
        catch(Throwable throwable1)
        {
            getRecordNode().logEvent(8);
            ExportHandler.err(1, throwable1, "Error while writing out definiton for " + getBeanName() + " = " + throwable1);
        }
    }

    protected IXMLComponent generateRecordElement()
    {
        XMLElement xmlelement = new XMLElement("record");
        xmlelement.addAttribute("name", getBeanName());
        xmlelement.addAttribute("type", getBeanType());
        xmlelement.addAttribute("package", getFileNode().getPackageName());
        xmlelement.add(generateDataElement());
        xmlelement.add(generateViewElement());
        xmlelement.add(generateFeedbackElement());
        return xmlelement;
    }

    protected IXMLComponent generateDataElement()
    {
        XMLElement xmlelement = new XMLElement("data");
        xmlelement.addAttribute("versiondigits", Long.toString(Version.getVersionDigits()));
        String s = getFileNode().getMemberType();
        if(s.equals("MNUDDS"))
            xmlelement.addAttribute("filemembertype", s);
        xmlelement.add(generateDataFieldsElement());
        xmlelement.add(generateDataIndicatorsElement());
        xmlelement.add(generateDataBuffersElement());
        return xmlelement;
    }

    protected IXMLComponent generateDataFieldsElement()
    {
        XMLElement xmlelement = new XMLElement("fields");
        for(FieldOutputEnumeration fieldoutputenumeration = getRecordLayout().getAllFields(); fieldoutputenumeration.hasMoreElements();)
        {
            IFieldOutput ifieldoutput = fieldoutputenumeration.nextFieldOutput();
            FieldNode fieldnode = ifieldoutput.getFieldNode();
            if(!fieldnode.isUnnamedConstantField())
            {
                xmlelement.add(generateDataFieldElement(ifieldoutput));
                char c = fieldnode.getFieldIOCapability();
                accumulateInputFieldLength(c, fieldnode.getLength());
                accumulateOutputFieldLength(c, fieldnode.getLength(), null != fieldnode.findKeywordById(148));
            }
        }

        return xmlelement;
    }

    protected IXMLComponent generateDataFieldElement(IFieldOutput ifieldoutput)
    {
        XMLElement xmlelement = new XMLElement("field");
        FieldNode fieldnode = ifieldoutput.getFieldNode();
        FieldType fieldtype = fieldnode.getFieldType();
        xmlelement.addAttribute("name", ifieldoutput.getFieldName());
        xmlelement.addAttribute("usage", (new Character(fieldnode.getFieldIOCapability())).toString());
        xmlelement.addAttribute("length", Integer.toString(fieldnode.getLength()));
        xmlelement.addAttribute("type", fieldtype.toString());
        xmlelement.addAttribute("shift", (new Character(fieldnode.getFieldShift())).toString());
        if(fieldtype.isOfType(9) || fieldtype.isOfType(11) || fieldtype.isOfType(10))
        {
            XMLElement xmlelement1 = new XMLElement("decimalprecision");
            xmlelement1.addAttribute("precision", Integer.toString(fieldnode.getDecimals()));
            xmlelement.add(xmlelement1);
        }
        if(fieldnode.getFieldType().isOfType(15))
        {
            NamedFieldOutput namedfieldoutput = (NamedFieldOutput)ifieldoutput;
            String s = namedfieldoutput.getDatFmt();
            String s2 = namedfieldoutput.getDatSep();
            if(s != null && !s.equals("ISO"))
            {
                XMLElement xmlelement2 = new XMLElement("dateformat");
                xmlelement2.addAttribute("format", s);
                xmlelement.add(xmlelement2);
            }
            if(s2 != null && !s2.equals("JOB"))
            {
                XMLElement xmlelement3 = new XMLElement("dateseparator");
                xmlelement3.addAttribute("separator", s2);
                xmlelement.add(xmlelement3);
            }
        }
        if(fieldnode.getFieldType().isOfType(16))
        {
            NamedFieldOutput namedfieldoutput1 = (NamedFieldOutput)ifieldoutput;
            String s1 = namedfieldoutput1.getTimFmt();
            String s3 = namedfieldoutput1.getTimSep();
            if((ifieldoutput instanceof InputFieldOutput) && s1 != null && !s1.equals("ISO"))
            {
                XMLElement xmlelement4 = new XMLElement("timeformat");
                xmlelement4.addAttribute("format", s1);
                xmlelement.add(xmlelement4);
            }
            if(s3 != null && !s3.equals("JOB"))
            {
                XMLElement xmlelement5 = new XMLElement("timeseparator");
                xmlelement5.addAttribute("separator", s3);
                xmlelement.add(xmlelement5);
            }
        }
        KeywordNodeEnumeration keywordnodeenumeration = null;
        boolean flag = false;
        keywordnodeenumeration = fieldnode.getKeywordsOfType(84);
        if(keywordnodeenumeration != null && keywordnodeenumeration.hasMoreElements())
        {
            KeywordNode keywordnode = keywordnodeenumeration.nextKeyword();
            KeywordParm keywordparm = keywordnode.getFirstParm();
            if(keywordparm != null)
            {
                xmlelement.add(generateDataFieldDefaultValueElement(keywordnode, keywordparm));
                flag = true;
            }
        }
        keywordnodeenumeration = fieldnode.getKeywordsOfType(85);
        if(keywordnodeenumeration != null && keywordnodeenumeration.hasMoreElements())
        {
            KeywordNode keywordnode1 = keywordnodeenumeration.nextKeyword();
            KeywordParm keywordparm1 = keywordnode1.getFirstParm();
            if(keywordparm1 != null)
            {
                xmlelement.add(generateDataFieldDefaultValueElement(keywordnode1, keywordparm1));
                flag = true;
            }
        }
        if(flag)
        {
            KeywordNodeEnumeration keywordnodeenumeration1 = fieldnode.getKeywordsOfType(154);
            if(keywordnodeenumeration1 == null || !keywordnodeenumeration1.hasMoreElements())
                keywordnodeenumeration1 = getRecordNode().getKeywordsOfType(154);
            if(keywordnodeenumeration1 != null && keywordnodeenumeration1.hasMoreElements())
                xmlelement.add(generateDataFieldOVRDTAElement(keywordnodeenumeration1.nextKeyword()));
        }
        for(KeywordNodeEnumeration keywordnodeenumeration2 = fieldnode.getKeywordsOfType(148); keywordnodeenumeration2.hasMoreElements(); xmlelement.add(generateDataFieldMSGIDElement(keywordnodeenumeration2.nextKeyword())));
        if(ifieldoutput instanceof InputFieldOutput)
        {
            InputFieldOutput inputfieldoutput = (InputFieldOutput)ifieldoutput;
            String s4 = inputfieldoutput.getNonConditionedCheckAttributes();
            if(s4 != null && s4.length() > 0)
            {
                XMLElement xmlelement6 = new XMLElement("checkattributes");
                xmlelement6.addAttribute("attributes", s4);
                xmlelement.add(xmlelement6);
            }
        }
        return xmlelement;
    }

    protected IXMLComponent generateDataFieldDefaultValueElement(KeywordNode keywordnode, KeywordParm keywordparm)
    {
        XMLElement xmlelement = new XMLElement("defaultvalue");
        String s = keywordparm.getVarStringUnquoted();
        if(s != null)
            xmlelement.addAttribute("parameter", keywordparm.getXMLString());
        if(keywordnode.getIndicatorString() != null)
            xmlelement.addAttribute("indicator", keywordnode.getIndicatorString());
        return xmlelement;
    }

    protected IXMLComponent generateDataFieldOVRDTAElement(KeywordNode keywordnode)
    {
        XMLElement xmlelement = new XMLElement("ovrdta");
        String s = keywordnode.getIndicatorString();
        if(s == null)
            s = "";
        xmlelement.addAttribute("indicator", s);
        return xmlelement;
    }

    protected IXMLComponent generateDataFieldMSGIDElement(KeywordNode keywordnode)
    {
        XMLElement xmlelement = new XMLElement("msgid");
        String s = keywordnode.getIndicatorString();
        if(s != null)
            xmlelement.addAttribute("indicator", s);
        KeywordParmEnumeration keywordparmenumeration = keywordnode.getParms();
        KeywordParm keywordparm = keywordparmenumeration.nextParm();
        String s1 = keywordparm.getVarString();
        if("*NONE".equals(s1))
            xmlelement.addAttribute("noneisset", "true");
        else
        if(s1 == null)
        {
            xmlelement.addAttribute("noneisset", "true");
        } else
        {
            if(s1.indexOf("&") == 0)
                xmlelement.addAttribute("fieldname", WebfacingConstants.replaceSpecialCharacters(s1.substring(1)));
            else
            if(s1.length() == 3)
            {
                xmlelement.addAttribute("prefix", s1);
                KeywordParm keywordparm1 = keywordparmenumeration.nextParm();
                s1 = keywordparm1.getVarString();
                if(s1.indexOf("&") == 0)
                    xmlelement.addAttribute("fieldname", WebfacingConstants.replaceSpecialCharacters(s1.substring(1)));
                else
                    xmlelement.addAttribute("msgid", s1);
            } else
            {
                xmlelement.addAttribute("msgid", s1);
            }
            KeywordParm keywordparm2 = keywordparmenumeration.nextParm();
            s1 = keywordparm2.getVarString();
            int i = s1.indexOf("/");
            String s2 = null;
            if(i >= 0)
            {
                String s3 = s1.substring(0, i);
                s2 = s1.substring(i + 1);
                if(s3.indexOf("&") == 0)
                    xmlelement.addAttribute("libraryfieldname", WebfacingConstants.replaceSpecialCharacters(s3.substring(1)));
                else
                    xmlelement.addAttribute("libraryname", s3);
            } else
            {
                s2 = s1;
            }
            if(s2.indexOf("&") == 0)
                xmlelement.addAttribute("filefieldname", WebfacingConstants.replaceSpecialCharacters(s2.substring(1)));
            else
                xmlelement.addAttribute("filename", s2);
        }
        return xmlelement;
    }

    protected IXMLComponent generateDataIndicatorsElement()
    {
        XMLElement xmlelement = new XMLElement("indicators");
        Vector vector = getReferencedOptionIndicators();
        XMLElement xmlelement1;
        for(Iterator iterator = vector.iterator(); iterator.hasNext(); xmlelement.add(xmlelement1))
        {
            String s = (String)iterator.next();
            xmlelement1 = new XMLElement("option");
            xmlelement1.addAttribute("indicator", s);
        }

        ResponseIndicatorList responseindicatorlist = getResponseIndicators();
        Vector vector1 = new Vector(responseindicatorlist.getSize());
        Vector vector2 = responseindicatorlist.getList();
        Hashtable hashtable = new Hashtable();
        for(int i = 0; i < vector2.size(); i++)
        {
            ResponseIndicatorList.ResponseIndicator responseindicator = (ResponseIndicatorList.ResponseIndicator)vector2.elementAt(i);
            responseindicator.addTo(vector1, hashtable);
        }

        responseindicatorlist.setSize(hashtable.size());
        XMLElement xmlelement2;
        for(Iterator iterator1 = vector1.iterator(); iterator1.hasNext(); xmlelement.add(xmlelement2))
        {
            ResponseIndicatorList.ResponseIndicator responseindicator1 = (ResponseIndicatorList.ResponseIndicator)hashtable.get((String)iterator1.next());
            xmlelement2 = new XMLElement("response");
            xmlelement2.addAttribute("indicator", Integer.toString(responseindicator1.getIndicator()));
            xmlelement2.addAttribute("isaidkey", (new Boolean(responseindicator1 instanceof ResponseIndicatorList.AIDKeyResponseIndicator)).toString());
        }

        KeywordNodeEnumeration keywordnodeenumeration = getFileNode().getKeywordsOfType(126);
        boolean flag = keywordnodeenumeration != null && keywordnodeenumeration.hasMoreElements();
        if(flag)
            xmlelement.addAttribute("separateindicatorarea", (new Boolean(flag)).toString());
        return xmlelement;
    }

    protected IXMLComponent generateDataBuffersElement()
    {
        XMLElement xmlelement = new XMLElement("buffers");
        KeywordNodeEnumeration keywordnodeenumeration = getFileNode().getKeywordsOfType(126);
        boolean flag = keywordnodeenumeration != null && keywordnodeenumeration.hasMoreElements();
        int i = getReferencedOptionIndicators().size();
        int j = getResponseIndicators().size();
        long l = (_outputFieldLengthAccumulator + (flag ? 0L : i)) * 2L;
        if(l > 0L)
            xmlelement.addAttribute("outputlength", Long.toString(l));
        l = (_inputFieldLengthAccumulator + (flag ? 0L : j)) * 2L;
        if(l > 0L)
            xmlelement.addAttribute("inputlength", Long.toString(l));
        return xmlelement;
    }

    protected IXMLComponent generateViewElement()
    {
        XMLElement xmlelement = new XMLElement("view");
        if(getRecordLayout().getDisplaySizeIndex() == 1)
            xmlelement.addAttribute("wide", "true");
        xmlelement.addAttribute("primarysize", Integer.toString(getFileNode().getPrimaryDisplaySize()));
        if(getFileNode().isDspSizConditioned())
            xmlelement.addAttribute("secondarysize", Integer.toString(getFileNode().getSecondaryDisplaySize()));
        generateViewFirstFieldLineAttribute(xmlelement);
        generateViewLastFieldLineAttribute(xmlelement);
        generateViewOutputOnlyAttribute(xmlelement);
        if(getRecordLayout().getFieldVisDefList().size() > 0)
            xmlelement.add(generateViewFieldVisibilityDefinitionElement(getRecordLayout().getFieldVisDefList()));
        IXMLComponent ixmlcomponent = generateViewKeywordsElement(xmlelement);
        xmlelement.add(ixmlcomponent);
        xmlelement.add(generateViewFieldsElement());
        KeySequence keysequence = new KeySequence(getRecordNode(), (CommandKeyLabelList)_visibleCommandKeyLabelList.clone());
        xmlelement.add(generateViewAIDKeysElement(keysequence, ixmlcomponent));
        xmlelement.add(generateViewCommandKeyLabelsElement(keysequence));
        if(getRecordNode().isWindow())
            xmlelement.add(generateViewWindowElement());
        xmlelement.add(generateViewDisplayAttributesElement());
        xmlelement.add(generateViewOnlineHelpElement(ixmlcomponent));
        return xmlelement;
    }

    protected void generateViewFirstFieldLineAttribute(XMLElement xmlelement)
    {
        int i = getRecordLayout().getFirstRow();
        xmlelement.addAttribute("firstfieldline", Integer.toString(i));
    }

    protected void generateViewLastFieldLineAttribute(XMLElement xmlelement)
    {
        int i = getRecordLayout().getLastRow();
        xmlelement.addAttribute("lastfieldline", Integer.toString(i));
    }

    protected void generateViewOutputOnlyAttribute(XMLElement xmlelement)
    {
        boolean flag = true;
        for(FieldOutputEnumeration fieldoutputenumeration = getRecordLayout().getDisplayableFields(); fieldoutputenumeration.hasMoreElements();)
        {
            IFieldOutput ifieldoutput = fieldoutputenumeration.nextFieldOutput();
            if(!ifieldoutput.getFieldNode().isUnnamedConstantField() && (ifieldoutput.getFieldNode().getFieldUsage() == 'B' || ifieldoutput.getFieldNode().getFieldUsage() == 'I'))
            {
                flag = false;
                break;
            }
        }

        xmlelement.addAttribute("outputonly", (new Boolean(flag)).toString());
    }

    protected IXMLComponent generateViewFieldVisibilityDefinitionElement(List list)
    {
        XMLElement xmlelement = new XMLElement("fieldvisdef");
        XMLElement xmlelement1;
        for(Iterator iterator = list.iterator(); iterator.hasNext(); xmlelement.add(xmlelement1))
        {
            String s = (String)iterator.next();
            int i = s.indexOf('"');
            int j = s.indexOf('"', i + 1);
            xmlelement1 = new XMLElement("visdef");
            xmlelement1.addAttribute("string", s.substring(i + 1, j));
        }

        return xmlelement;
    }

    protected IXMLComponent generateViewKeywordsElement(XMLElement xmlelement)
    {
        XMLElement xmlelement1 = new XMLElement("keywords");
        RecordNode recordnode = getRecordNode();
        xmlelement1.add(generateViewKeywordElement(recordnode.getKeywordsOfType(169)));
        xmlelement1.add(generateViewKeywordElement(recordnode.getKeywordsOfType(168)));
        xmlelement1.add(generateViewKeywordElement(recordnode.getKeywordsOfType(152)));
        xmlelement1.add(generateViewKeywordElement(recordnode.getKeywordsOfType(159)));
        xmlelement1.add(generateViewKeywordElement(recordnode.getKeywordsOfType(163)));
        KeywordNodeEnumeration keywordnodeenumeration = recordnode.getKeywordsOfType(74);
        if(keywordnodeenumeration.hasMoreElements() && !recordnode.isWindow())
            xmlelement1.add(generateViewKeywordCLRLElement(keywordnodeenumeration.nextKeyword(), xmlelement));
        keywordnodeenumeration = recordnode.getKeywordsOfType(209);
        if(keywordnodeenumeration.hasMoreElements())
        {
            KeywordNode keywordnode = keywordnodeenumeration.nextKeyword();
            IXMLComponent ixmlcomponent = generateViewKeywordElement("KWD_SLNO");
            ixmlcomponent.add(generateViewKeywordParameterElement(keywordnode.getParmsAsString()));
            xmlelement1.add(ixmlcomponent);
        }
        xmlelement1.add(generateViewKeywordElement(recordnode.getKeywordsOfType(137)));
        IXMLComponent ixmlcomponent1;
        for(keywordnodeenumeration = recordnode.getKeywordsOfType(97); keywordnodeenumeration.hasMoreElements(); xmlelement1.add(ixmlcomponent1))
        {
            KeywordNode keywordnode1 = keywordnodeenumeration.nextKeyword();
            ixmlcomponent1 = generateViewKeywordElement("KWD_ERASE", keywordnode1.getIndicatorString());
            Vector vector = keywordnode1.getParmsVector();
            if(vector != null && vector.size() > 0)
            {
                for(Iterator iterator = vector.iterator(); iterator.hasNext();)
                {
                    KeywordParm keywordparm = (KeywordParm)iterator.next();
                    String s2 = keywordparm.getVarString();
                    if(s2 != null)
                    {
                        s2 = WebfacingConstants.replaceSpecialCharacters(s2);
                        ixmlcomponent1.add(generateViewKeywordParameterElement(s2));
                    }
                }

            }
        }

        xmlelement1.add(generateViewKeywordElement(recordnode.getKeywordsOfType(175)));
        if(recordnode.isWindow())
        {
            RecordNodeWdwInfo recordnodewdwinfo = recordnode.getWdwInfo(getRecordLayout().getDisplaySizeIndex());
            IXMLComponent ixmlcomponent2 = generateViewKeywordElement("KWD_WINDOW");
            ixmlcomponent2.add(generateViewKeywordParameterElement(Short.toString(recordnodewdwinfo.rows)));
            ixmlcomponent2.add(generateViewKeywordParameterElement(Short.toString(recordnodewdwinfo.cols)));
            if(recordnodewdwinfo.def)
            {
                if(recordnodewdwinfo.fWdwDFT)
                    ixmlcomponent2.add(generateViewKeywordParameterElement("*DFT"));
            } else
            {
                String s = recordnodewdwinfo.szNamedWdw;
                try
                {
                    s = WebfacingConstants.replaceSpecialCharacters(s);
                }
                catch(Throwable throwable)
                {
                    recordnode.logEvent(98, new String[] {
                        "Error replacing special characters for string: " + s + " = " + throwable
                    });
                    ExportHandler.err(2, "Error replacing special characters for string: " + s);
                }
                ixmlcomponent2.add(generateViewKeywordParameterElement(s));
            }
            xmlelement1.add(ixmlcomponent2);
            if(recordnodewdwinfo.def)
                xmlelement1.add(generateViewKeywordElement(recordnode.getKeywordsOfType(171)));
        }
        FileNode filenode = getFileNode();
        if(filenode.isKEEPSpecified())
        {
            keywordnodeenumeration = recordnode.getKeywordsOfType(131);
            IXMLComponent ixmlcomponent3 = generateViewKeywordElement("KWD_KEEP");
            if(keywordnodeenumeration.hasMoreElements())
                ixmlcomponent3.add(generateViewKeywordParameterElement("YES"));
            xmlelement1.add(ixmlcomponent3);
        }
        if(filenode.isASSUMESpecified())
        {
            keywordnodeenumeration = recordnode.getKeywordsOfType(9);
            IXMLComponent ixmlcomponent4 = generateViewKeywordElement("KWD_ASSUME");
            if(keywordnodeenumeration.hasMoreElements())
                ixmlcomponent4.add(generateViewKeywordParameterElement("YES"));
            xmlelement1.add(ixmlcomponent4);
        }
        xmlelement1.add(generateViewKeywordElement(filenode.getKeywordsOfType(101)));
        keywordnodeenumeration = recordnode.getKeywordsOfType(80);
        if(keywordnodeenumeration.hasMoreElements())
        {
            KeywordNode keywordnode2 = keywordnodeenumeration.nextKeyword();
            String s1 = keywordnode2.getIndicatorString();
            if(s1 == null)
                s1 = "";
            IXMLComponent ixmlcomponent5 = generateViewKeywordElement("KWD_CSRLOC", s1);
            int i = 0;
            KeywordParm keywordparm1 = keywordnode2.getParm(i);
            String s3 = keywordparm1.getVarString();
            try
            {
                s3 = WebfacingConstants.replaceSpecialCharacters(s3);
            }
            catch(Throwable throwable1)
            {
                keywordnode2.logEvent(98, new String[] {
                    "Error replacing special characters for string: " + s3 + " = " + throwable1
                });
                ExportHandler.err(2, "Error replacing special characters for string: " + s3);
            }
            ixmlcomponent5.add(generateViewKeywordParameterElement(s3));
            i++;
            keywordparm1 = keywordnode2.getParm(i);
            s3 = keywordparm1.getVarString();
            try
            {
                s3 = WebfacingConstants.replaceSpecialCharacters(s3);
            }
            catch(Throwable throwable2)
            {
                keywordnode2.logEvent(98, new String[] {
                    "Error replacing special characters for string: " + s3 + " = " + throwable2
                });
                ExportHandler.err(2, "Error replacing special characters for string: " + s3);
            }
            ixmlcomponent5.add(generateViewKeywordParameterElement(s3));
            xmlelement1.add(ixmlcomponent5);
        }
        return xmlelement1;
    }

    protected IXMLComponent generateViewKeywordElement(KeywordNodeEnumeration keywordnodeenumeration)
    {
        if(keywordnodeenumeration == null || !keywordnodeenumeration.hasMoreElements())
            return null;
        KeywordNode keywordnode = keywordnodeenumeration.nextKeyword();
        IXMLComponent ixmlcomponent = generateViewKeywordElement(keywordnode.getKeywordIdAsString(), keywordnode.getIndicatorString());
        Vector vector = keywordnode.getParmsVector();
        if(vector != null && vector.size() > 0)
        {
            for(Iterator iterator = vector.iterator(); iterator.hasNext();)
            {
                KeywordParm keywordparm = (KeywordParm)iterator.next();
                String s = keywordparm.getVarKwdTokenAsString();
                if(s != null)
                    ixmlcomponent.add(generateViewKeywordParameterElement(s));
            }

        }
        return ixmlcomponent;
    }

    protected IXMLComponent generateViewKeywordElement(String s)
    {
        XMLElement xmlelement = new XMLElement("keyword");
        xmlelement.addAttribute("id", s);
        return xmlelement;
    }

    protected IXMLComponent generateViewKeywordElement(String s, String s1)
    {
        XMLElement xmlelement = new XMLElement("keyword");
        xmlelement.addAttribute("id", s);
        if(s1 != null)
            xmlelement.addAttribute("indicator", s1);
        return xmlelement;
    }

    protected IXMLComponent generateViewKeywordCLRLElement(KeywordNode keywordnode, XMLElement xmlelement)
    {
        IXMLComponent ixmlcomponent = generateViewKeywordElement("KWD_CLRL");
        RecordLayout recordlayout = getRecordLayout();
        String s = keywordnode.getParmsAsString();
        ixmlcomponent.add(generateViewKeywordParameterElement(s));
        if(s.equals("*NO") || !s.equals("*ALL") && !s.equals("*END") && Integer.parseInt(s) <= recordlayout.getLastRow() - getRecordLayout().getFirstRow())
        {
            xmlelement.addAttribute("firstcolumn", Integer.toString(recordlayout.getFirstColumn()));
            xmlelement.addAttribute("lastcolumn", Integer.toString(recordlayout.getLastColumn()));
            if(recordlayout.isCLRLWindow())
            {
                XMLElement xmlelement1 = new XMLElement("window");
                for(int i = 0; i < recordlayout.getNumberOfCLRLWindowTitles(); i++)
                {
                    String s1;
                    if(recordlayout.isCLRLWindowTitleConstant(i))
                        s1 = "true";
                    else
                        s1 = "false";
                    XMLElement xmlelement2 = new XMLElement("windowtitle");
                    xmlelement2.addAttribute("indicator", recordlayout.getCLRLWindowTitleIndicatorExpression(i));
                    xmlelement2.addAttribute("constantastitle", s1);
                    xmlelement2.addAttribute("title", recordlayout.getCLRLWindowTitle(i));
                    xmlelement1.add(xmlelement2);
                }

                xmlelement.add(xmlelement1);
            }
        }
        return ixmlcomponent;
    }

    protected IXMLComponent generateViewKeywordXXXMSGElement(KeywordNode keywordnode, String s)
    {
        KeywordParm keywordparm = keywordnode.getFirstParm();
        IXMLComponent ixmlcomponent = generateViewKeywordElement("KWD_" + s + "MSG", keywordnode.getIndicatorString());
        ixmlcomponent.add(generateViewKeywordParameterElement(keywordparm.getXMLString()));
        keywordparm = keywordnode.getParm(1);
        if(keywordparm != null)
            ixmlcomponent.add(generateViewKeywordParameterElement(Integer.toString(keywordparm.getVarNumber())));
        return ixmlcomponent;
    }

    protected IXMLComponent generateViewKeywordXXXMSGIDElement(KeywordNode keywordnode, String s)
    {
        XMLElement xmlelement = new XMLElement("msgid");
        xmlelement.addAttribute("prefix", s);
        KeywordParmEnumeration keywordparmenumeration = keywordnode.getParms();
        String s1 = keywordnode.getIndicatorString();
        if(s1 != null)
            xmlelement.addAttribute("indicator", s1);
        KeywordParm keywordparm = keywordparmenumeration.nextParm();
        String s2 = keywordparm.getVarString();
        xmlelement.addAttribute("msgid", s2);
        keywordparm = keywordparmenumeration.nextParm();
        s2 = keywordparm.getVarString();
        int i = s2.indexOf("/");
        String s4 = null;
        if(i >= 0)
        {
            String s5 = s2.substring(0, i);
            s4 = s2.substring(i + 1);
            xmlelement.addAttribute("libraryname", s5);
        } else
        {
            s4 = s2;
        }
        xmlelement.addAttribute("msgfile", s4);
        keywordparm = keywordparmenumeration.nextParm();
        if(keywordparm != null)
        {
            if(keywordparm.getVarParmToken() != 0)
            {
                xmlelement.addAttribute("responseindicator", Integer.toString(keywordparm.getVarParmToken()));
                keywordparm = keywordparmenumeration.nextParm();
            }
            if(keywordparm != null)
            {
                String s3 = keywordparm.getVarString();
                xmlelement.addAttribute("msgdatafieldname", WebfacingConstants.replaceSpecialCharacters(s3.substring(1)));
            }
        }
        return xmlelement;
    }

    protected IXMLComponent generateViewKeywordParameterElement(String s)
    {
        XMLElement xmlelement = new XMLElement("parameter");
        xmlelement.addAttribute("string", s);
        return xmlelement;
    }

    protected IXMLComponent generateViewFieldsElement()
    {
        XMLElement xmlelement = new XMLElement("fields");
        for(FieldOutputEnumeration fieldoutputenumeration = getRecordLayout().getDisplayableFields(); fieldoutputenumeration.hasMoreElements();)
        {
            IFieldOutput ifieldoutput = fieldoutputenumeration.nextFieldOutput();
            if(ifieldoutput.getFieldNode().isUnnamedConstantField())
            {
                if(!((FieldOutput)ifieldoutput).isComputed())
                    try
                    {
                        ((ConstantFieldOutput)ifieldoutput).updateStringMatchedKeyLabelList();
                        updateRecordStringMatchedKeyLabelList((ConstantFieldOutput)ifieldoutput);
                    }
                    catch(Throwable throwable)
                    {
                        ifieldoutput.getFieldNode().logEvent(98, new String[] {
                            throwable.toString()
                        });
                        ExportHandler.err(1, "Error creating field view definitions: " + throwable.toString());
                    }
            } else
            {
                if(null != ifieldoutput.getMainWebSetting() && 20 == ifieldoutput.getMainWebSetting().getWebSettingId() && null != ifieldoutput.getMainWebSetting().getWebSettingValue())
                {
                    ((FieldOutput)ifieldoutput).updateStringMatchedKeyLabelList();
                    updateRecordStringMatchedKeyLabelList((FieldOutput)ifieldoutput);
                }
                xmlelement.add(generateViewFieldElement(ifieldoutput));
            }
        }

        return xmlelement;
    }

    protected IXMLComponent generateViewFieldElement(IFieldOutput ifieldoutput)
    {
        XMLElement xmlelement = new XMLElement("field");
        FieldNode fieldnode = ifieldoutput.getFieldNode();
        xmlelement.addAttribute("name", ifieldoutput.getFieldName());
        xmlelement.addAttribute("row", Integer.toString(ifieldoutput.getRow()));
        xmlelement.addAttribute("column", Integer.toString(ifieldoutput.getColumn()));
        xmlelement.addAttribute("width", Integer.toString(ifieldoutput.getWidth()));
        KeywordNodeEnumeration keywordnodeenumeration = fieldnode.getKeywordsOfType(93);
        if(keywordnodeenumeration.hasMoreElements())
        {
            KeywordNode keywordnode = keywordnodeenumeration.nextKeyword();
            KeywordParm keywordparm1 = keywordnode.getFirstParm();
            XMLElement xmlelement3 = new XMLElement("editcode");
            xmlelement3.addAttribute("code", (new Character(EditCodeMappingHandler.getSystemEditCode(keywordparm1.getVarChar()))).toString());
            keywordparm1 = keywordnode.getParm(1);
            if(keywordparm1 != null)
                xmlelement3.addAttribute("secondcode", (new Character(keywordparm1.getVarChar())).toString());
            xmlelement.add(xmlelement3);
        }
        keywordnodeenumeration = fieldnode.getKeywordsOfType(95);
        if(keywordnodeenumeration.hasMoreElements())
        {
            KeywordParm keywordparm = keywordnodeenumeration.nextKeyword().getFirstParm();
            XMLElement xmlelement1 = new XMLElement("editword");
            String s = keywordparm.getXMLString();
            xmlelement1.addAttribute("word", s);
            xmlelement.add(xmlelement1);
        }
        for(KeywordNodeEnumeration keywordnodeenumeration1 = fieldnode.getKeywordsOfType(99); keywordnodeenumeration1.hasMoreElements(); xmlelement.add(generateViewKeywordXXXMSGElement(keywordnodeenumeration1.nextKeyword(), "ERR")));
        for(KeywordNodeEnumeration keywordnodeenumeration2 = fieldnode.getKeywordsOfType(100); keywordnodeenumeration2.hasMoreElements(); xmlelement.add(generateViewKeywordXXXMSGIDElement(keywordnodeenumeration2.nextKeyword(), "ERR")));
        NamedFieldOutput namedfieldoutput = (NamedFieldOutput)ifieldoutput;
        if(namedfieldoutput.getWebsettings().isMask())
        {
            XMLElement xmlelement2 = new XMLElement("mask");
            int i = namedfieldoutput.getWebsettings().getMaskLow();
            int j = namedfieldoutput.getWebsettings().getMaskHigh();
            xmlelement2.addAttribute("start", Integer.toString(i));
            xmlelement2.addAttribute("end", Integer.toString(j));
            xmlelement.add(xmlelement2);
        }
        if(ifieldoutput instanceof InputFieldOutput)
        {
            InputFieldOutput inputfieldoutput = (InputFieldOutput)ifieldoutput;
            if(inputfieldoutput.getHeight() > 1)
                xmlelement.addAttribute("height", Integer.toString(inputfieldoutput.getHeight()));
            KeywordNodeEnumeration keywordnodeenumeration3 = fieldnode.getKeywordsOfType(70);
            if(keywordnodeenumeration3.hasMoreElements())
                xmlelement.add(generateViewFieldCHKMSGIDElement(keywordnodeenumeration3.nextKeyword(), inputfieldoutput.getFieldName()));
            if(!inputfieldoutput.getValues().equals("") && (!inputfieldoutput.getEdtcde().equals("") || !inputfieldoutput.getEdtwrd().equals("")))
                xmlelement.addAttribute("values", inputfieldoutput.getValues());
            keywordnodeenumeration3 = fieldnode.getKeywordsOfType(204);
            if(keywordnodeenumeration3.hasMoreElements())
            {
                String s1 = fieldnode.getDisplayAttributes().getNDIndExpr();
                if(s1 != null)
                    if(s1.equals(""))
                        xmlelement.add(generateViewKeywordElement("PAR_DSPATR_ND"));
                    else
                        xmlelement.add(generateViewKeywordElement("PAR_DSPATR_ND", s1));
            }
            String s2 = fieldnode.getDisplayAttributes().getPRIndExpr();
            if(s2 != null)
                if(s2.equals(""))
                    xmlelement.add(generateViewKeywordElement("PAR_DSPATR_PR"));
                else
                    xmlelement.add(generateViewKeywordElement("PAR_DSPATR_PR", s2));
            s2 = fieldnode.getDisplayAttributes().getMDTIndExpr();
            if(s2 != null)
                if(s2.equals(""))
                    xmlelement.add(generateViewKeywordElement("PAR_DSPATR_MDT"));
                else
                    xmlelement.add(generateViewKeywordElement("PAR_DSPATR_MDT", s2));
        }
        return xmlelement;
    }

    protected IXMLComponent generateViewFieldCHKMSGIDElement(KeywordNode keywordnode, String s)
    {
        XMLElement xmlelement = new XMLElement("chkmsgid");
        KeywordParmEnumeration keywordparmenumeration = keywordnode.getParms();
        KeywordParm keywordparm = null;
        String s1 = null;
        String s2 = null;
        String s3 = null;
        String s4 = null;
        keywordparm = keywordparmenumeration.nextParm();
        s1 = keywordparm.getVarString();
        keywordparm = keywordparmenumeration.nextParm();
        String s5 = keywordparm.getVarString();
        int i = s5.indexOf("/");
        if(i >= 0)
        {
            s2 = s5.substring(0, i);
            s3 = s5.substring(i + 1);
        } else
        {
            s3 = s5;
        }
        if(keywordparmenumeration.hasMoreElements())
        {
            KeywordParm keywordparm1 = keywordparmenumeration.nextParm();
            s4 = WebfacingConstants.replaceSpecialCharacters(keywordparm1.getVarString().substring(1));
        }
        xmlelement.addAttribute("messageid", s1);
        xmlelement.addAttribute("library", s2 != null ? s2 : "*LIBL");
        xmlelement.addAttribute("messagefile", s3);
        if(s4 != null)
            xmlelement.addAttribute("messagedatafield", s4);
        xmlelement.addAttribute("fieldname", s);
        return xmlelement;
    }

    protected IXMLComponent generateViewAIDKeysElement(KeySequence keysequence, IXMLComponent ixmlcomponent)
    {
        XMLElement xmlelement = new XMLElement("aidkeys");
        CommandKeyLabelList commandkeylabellist = new CommandKeyLabelList();
        commandkeylabellist.mergeList(_defaultCommandKeyLabelList);
        commandkeylabellist.mergeList(_definedKeyLabelList);
        commandkeylabellist.mergeList(_visibleCommandKeyLabelList);
        findFunctionKeyKeywords(getFileNode(), keysequence);
        findFunctionKeyKeywords(getRecordNode(), keysequence);
        findCommandKeyKeywords(getFileNode(), keysequence);
        findCommandKeyKeywords(getRecordNode(), keysequence);
        for(Iterator iterator = keysequence.getSequencedCommandKeys(); iterator.hasNext(); xmlelement.add(generateViewAIDKeyElement((IReferencedAIDKey)iterator.next(), commandkeylabellist, false, ixmlcomponent)));
        for(Iterator iterator1 = keysequence.getSequencedFunctionKeys(); iterator1.hasNext(); xmlelement.add(generateViewAIDKeyElement((IReferencedAIDKey)iterator1.next(), commandkeylabellist, false, ixmlcomponent)));
        Iterator iterator2 = keysequence.getHiddenFunctionKeys();
        if(iterator2 != null)
            for(; iterator2.hasNext(); xmlelement.add(generateViewAIDKeyElement((IReferencedAIDKey)iterator2.next(), commandkeylabellist, true, ixmlcomponent)));
        iterator2 = keysequence.getHiddenCommandKeys();
        if(iterator2 != null)
            for(; iterator2.hasNext(); xmlelement.add(generateViewAIDKeyElement((IReferencedAIDKey)iterator2.next(), commandkeylabellist, true, ixmlcomponent)));
        return xmlelement;
    }

    protected IXMLComponent generateViewAIDKeyElement(IReferencedAIDKey ireferencedaidkey, CommandKeyLabelList commandkeylabellist, boolean flag, IXMLComponent ixmlcomponent)
    {
        XMLElement xmlelement = new XMLElement("aidkey");
        String s = ireferencedaidkey.name();
        String s1 = ireferencedaidkey.name();
        int i = -1;
        if(commandkeylabellist != null && commandkeylabellist.getLabel(s) != null && commandkeylabellist.getLabel(s).getKeyLabel() != null)
        {
            s1 = commandkeylabellist.getLabel(s).getKeyLabel();
            i = commandkeylabellist.getLabel(s).getPriority();
        }
        xmlelement.addAttribute("key", s);
        xmlelement.addAttribute("label", WebfacingConstants.getXMLString(s1));
        xmlelement.addAttribute("beanname", getBeanName());
        xmlelement.addAttribute("priority", Integer.toString(i));
        if(ireferencedaidkey.indicatorString() != null)
            xmlelement.addAttribute("indicator", ireferencedaidkey.indicatorString());
        if(flag)
            xmlelement.addAttribute("shown", "false");
        if(ireferencedaidkey.name().equals("PAGEDOWN") || ireferencedaidkey.name().equals("ROLLUP"))
            ixmlcomponent.add(generateViewKeywordElement("KWD_PAGEDOWN", ireferencedaidkey.indicatorString()));
        if(ireferencedaidkey.name().equals("PAGEUP") || ireferencedaidkey.name().equals("ROLLDOWN"))
            ixmlcomponent.add(generateViewKeywordElement("KWD_PAGEUP", ireferencedaidkey.indicatorString()));
        return xmlelement;
    }

    protected IXMLComponent generateViewCommandKeyLabelsElement(KeySequence keysequence)
    {
        XMLElement xmlelement = new XMLElement("commandkeylabels");
        CommandKeyLabelList commandkeylabellist = keysequence.getVisibleKeyLabelList();
        if(commandkeylabellist != null)
        {
            for(Iterator iterator = commandkeylabellist.getLabels(); iterator.hasNext(); xmlelement.add(generateViewCommandKeyLabelElement((CommandKeyLabel)iterator.next())));
        }
        if(_visibilityCondtionedKeyLabelList != null)
        {
            for(Iterator iterator1 = _visibilityCondtionedKeyLabelList.getLabels(); iterator1.hasNext(); xmlelement.add(generateViewCommandKeyLabelVisibilityConditionedElement((VisibilityConditionedCommandKeyLabel)iterator1.next())));
        }
        if(_indicatorConditionedKeyLabelList != null)
        {
            for(Iterator iterator2 = _indicatorConditionedKeyLabelList.getLabels(); iterator2.hasNext(); xmlelement.add(generateViewCommandKeyLabelIndicatorConditionedElement((IndicatorConditionedCommandKeyLabel)iterator2.next())));
        }
        return xmlelement;
    }

    protected IXMLComponent generateViewCommandKeyLabelElement(CommandKeyLabel commandkeylabel)
    {
        XMLElement xmlelement = new XMLElement("commandkeylabel");
        xmlelement.addAttribute("key", commandkeylabel.getKeyName());
        if(null != commandkeylabel.getKeyLabel())
            xmlelement.addAttribute("label", WebfacingConstants.getXMLString(commandkeylabel.getKeyLabel()));
        xmlelement.addAttribute("beanname", getBeanName());
        xmlelement.addAttribute("priority", Integer.toString(commandkeylabel.getPriority()));
        if(null != commandkeylabel.getFieldName())
            xmlelement.addAttribute("fieldid", WebfacingConstants.getXMLString(commandkeylabel.getFieldName()));
        return xmlelement;
    }

    protected IXMLComponent generateViewCommandKeyLabelVisibilityConditionedElement(VisibilityConditionedCommandKeyLabel visibilityconditionedcommandkeylabel)
    {
        ArrayList arraylist = visibilityconditionedcommandkeylabel.getConditionedLabels();
        if(arraylist.isEmpty())
            return null;
        XMLElement xmlelement = (XMLElement)generateViewCommandKeyLabelElement(visibilityconditionedcommandkeylabel);
        xmlelement.setName("visibilityconditioned");
        XMLElement xmlelement1;
        for(Iterator iterator = arraylist.iterator(); iterator.hasNext(); xmlelement.add(xmlelement1))
        {
            VisibilityConditionedLabel visibilityconditionedlabel = (VisibilityConditionedLabel)iterator.next();
            xmlelement1 = new XMLElement("conditionedlabel");
            xmlelement1.addAttribute("label", WebfacingConstants.getXMLString(visibilityconditionedlabel.getLabel()));
            xmlelement1.addAttribute("fieldid", visibilityconditionedlabel.getFieldID());
            if(visibilityconditionedlabel.isDynamic())
                xmlelement1.addAttribute("isdynamic", "true");
        }

        return xmlelement;
    }

    protected IXMLComponent generateViewCommandKeyLabelIndicatorConditionedElement(IndicatorConditionedCommandKeyLabel indicatorconditionedcommandkeylabel)
    {
        ArrayList arraylist = indicatorconditionedcommandkeylabel.getConditionedLabels();
        if(arraylist.isEmpty())
            return null;
        XMLElement xmlelement = (XMLElement)generateViewCommandKeyLabelElement(indicatorconditionedcommandkeylabel);
        xmlelement.setName("indicatorconditioned");
        XMLElement xmlelement1;
        for(Iterator iterator = arraylist.iterator(); iterator.hasNext(); xmlelement.add(xmlelement1))
        {
            IndicatorConditionedLabel indicatorconditionedlabel = (IndicatorConditionedLabel)iterator.next();
            xmlelement1 = new XMLElement("conditionedlabel");
            xmlelement1.addAttribute("label", WebfacingConstants.getXMLString(indicatorconditionedlabel.getLabel()));
            xmlelement1.addAttribute("indicator", indicatorconditionedlabel.getIndicatorExpression());
            if(indicatorconditionedlabel.isDynamic())
                xmlelement1.addAttribute("isdynamic", "true");
        }

        return xmlelement;
    }

    protected IXMLComponent generateViewWindowElement()
    {
        XMLElement xmlelement = new XMLElement("window");
        RecordNodeWdwInfo recordnodewdwinfo = getRecordNode().getWdwInfo(getRecordLayout().getDisplaySizeIndex());
        if(recordnodewdwinfo.def && !recordnodewdwinfo.fWdwDFT)
        {
            if(recordnodewdwinfo.hardlin)
            {
                xmlelement.addAttribute("startline", Short.toString(recordnodewdwinfo.strLin));
            } else
            {
                String s = recordnodewdwinfo.szRowField;
                try
                {
                    s = WebfacingConstants.replaceSpecialCharacters(s);
                }
                catch(Throwable throwable)
                {
                    getRecordNode().logEvent(98, new String[] {
                        "Error replacing special characters for string: " + s + " = " + throwable
                    });
                    ExportHandler.err(2, "Error replacing special characters for string: " + s);
                }
                xmlelement.addAttribute("startlinefield", s);
            }
            if(recordnodewdwinfo.hardpos)
            {
                xmlelement.addAttribute("startpos", Short.toString(recordnodewdwinfo.strPos));
            } else
            {
                String s1 = recordnodewdwinfo.szColField;
                try
                {
                    s1 = WebfacingConstants.replaceSpecialCharacters(s1);
                }
                catch(Throwable throwable1)
                {
                    getRecordNode().logEvent(98, new String[] {
                        "Error replacing special characters for string: " + s1 + " = " + throwable1
                    });
                    ExportHandler.err(2, "Error replacing special characters for string: " + s1);
                }
                xmlelement.addAttribute("startposfield", s1);
            }
        }
        if(recordnodewdwinfo.def)
        {
            for(KeywordNodeEnumeration keywordnodeenumeration = getRecordNode().getKeywordsOfType(225); keywordnodeenumeration.hasMoreElements(); xmlelement.add(generateViewWindowTitleElement(keywordnodeenumeration.nextKeyword())));
        }
        return xmlelement;
    }

    protected IXMLComponent generateViewWindowTitleElement(KeywordNode keywordnode)
    {
        XMLElement xmlelement = new XMLElement("windowtitle");
        String s = keywordnode.getIndicatorString();
        if(s == null)
            s = "";
        String s1 = "true";
        String s2 = "";
        String s3 = "";
        String s4 = "";
        String s5 = "";
        String s6 = "";
        for(KeywordParmEnumeration keywordparmenumeration = keywordnode.getParms(); keywordparmenumeration.hasMoreElements();)
        {
            KeywordParm keywordparm = keywordparmenumeration.nextParm();
            switch(keywordparm.getVarKwdToken())
            {
            case 365: 
            case 366: 
            case 367: 
            case 368: 
            case 369: 
            case 372: 
            default:
                break;

            case 373: 
                KeywordParm keywordparm1 = keywordparm.getFirstSubParm();
                if(keywordparm1 == null)
                    break;
                s2 = keywordparm1.getVarString();
                if(keywordparm1.getParmType() == 68)
                {
                    s1 = "false";
                    s2 = s2.substring(1);
                    s2 = WebfacingConstants.replaceSpecialCharacters(s2);
                } else
                {
                    s2 = keywordparm1.getXMLString();
                }
                break;

            case 360: 
                s3 = "*CENTER";
                break;

            case 361: 
                s3 = "*LEFT";
                break;

            case 362: 
                s3 = "*RIGHT";
                break;

            case 370: 
                KeywordParm keywordparm2 = keywordparm.getFirstSubParm();
                if(keywordparm2 != null)
                    s4 = keywordparm2.getVarKwdTokenAsString().substring(10);
                break;

            case 371: 
                Vector vector = keywordparm.getSubParms();
                int i = 0;
                KeywordParm keywordparm3 = (KeywordParm)vector.get(i++);
                if(keywordparm3 != null)
                    s5 = keywordparm3.getVarKwdTokenAsString().substring(11);
                for(; i < vector.size(); i++)
                {
                    KeywordParm keywordparm4 = (KeywordParm)vector.get(i++);
                    if(keywordparm4 != null)
                        s5 = s5.concat(" ").concat(keywordparm4.getVarKwdTokenAsString().substring(11));
                }

                break;

            case 363: 
                s6 = "*TOP";
                break;

            case 364: 
                s6 = "*BOTTOM";
                break;
            }
        }

        xmlelement.addAttribute("indicator", s);
        xmlelement.addAttribute("constantastitle", s1);
        xmlelement.addAttribute("title", s2);
        xmlelement.addAttribute("color", s4);
        xmlelement.addAttribute("dspatr", s5);
        xmlelement.addAttribute("alignment", s3);
        xmlelement.addAttribute("position", s6);
        return xmlelement;
    }

    protected IXMLComponent generateViewDisplayAttributesElement()
    {
        XMLElement xmlelement = new XMLElement("displayattributes");
        for(FieldOutputEnumeration fieldoutputenumeration = getRecordLayout().getDisplayableFields(); fieldoutputenumeration.hasMoreElements();)
        {
            IFieldOutput ifieldoutput = fieldoutputenumeration.nextFieldOutput();
            String s = ifieldoutput.getFieldNode().getDisplayAttributes().getPCIndExpr();
            if(s != null)
            {
                XMLElement xmlelement1 = new XMLElement("pcfieldinfo");
                xmlelement1.addAttribute("fieldname", ifieldoutput.getFieldName());
                xmlelement1.addAttribute("indicator", s);
                xmlelement.add(xmlelement1);
            }
        }

        return xmlelement;
    }

    protected IXMLComponent generateViewOnlineHelpElement(IXMLComponent ixmlcomponent)
    {
        XMLElement xmlelement = new XMLElement("onlinehelp");
        FileNode filenode = getFileNode();
        RecordNode recordnode = getRecordNode();
        KeywordNodeEnumeration keywordnodeenumeration = filenode.getKeywordsOfType(118);
        if(keywordnodeenumeration != null && keywordnodeenumeration.hasMoreElements())
        {
            KeywordNode keywordnode = keywordnodeenumeration.nextKeyword();
            ixmlcomponent.add(generateViewKeywordElement(keywordnode.getKeywordIdAsString(), keywordnode.getIndicatorString()));
        }
        keywordnodeenumeration = recordnode.getKeywordsOfType(118);
        if(keywordnodeenumeration != null && keywordnodeenumeration.hasMoreElements())
        {
            KeywordNode keywordnode1 = keywordnodeenumeration.nextKeyword();
            ixmlcomponent.add(generateViewKeywordElement(keywordnode1.getKeywordIdAsString(), keywordnode1.getIndicatorString()));
        }
        ixmlcomponent.add(generateViewKeywordElement(recordnode.getKeywordsOfType(110)));
        keywordnodeenumeration = recordnode.getKeywordsOfType(122);
        if(keywordnodeenumeration != null && keywordnodeenumeration.hasMoreElements())
        {
            IXMLComponent ixmlcomponent2;
            for(; keywordnodeenumeration.hasMoreElements(); ixmlcomponent.add(ixmlcomponent2))
            {
                KeywordNode keywordnode2 = keywordnodeenumeration.nextKeyword();
                String s = keywordnode2.getFirstParm().getXMLString();
                String s2 = keywordnode2.getIndicatorString();
                ixmlcomponent2 = generateViewKeywordElement("KWD_HLPTITLE", s2);
                ixmlcomponent2.add(generateViewKeywordParameterElement(s));
            }

        } else
        {
            KeywordNode keywordnode3 = filenode.findKeywordById(122);
            if(null != keywordnode3)
            {
                String s1 = keywordnode3.getFirstParm().getXMLString();
                IXMLComponent ixmlcomponent1 = generateViewKeywordElement("KWD_HLPTITLE");
                ixmlcomponent1.add(generateViewKeywordParameterElement(s1));
                ixmlcomponent.add(ixmlcomponent1);
            }
        }
        Iterator iterator = recordnode.getHelpspecs();
        if(iterator != null)
            while(iterator.hasNext()) 
            {
                HelpspecNode helpspecnode = (HelpspecNode)iterator.next();
                if(helpspecnode != null)
                {
                    int i = helpspecnode.getType();
                    if(i == 117 || i == 116)
                    {
                        int j = helpspecnode.getAreaType();
                        String s3 = null;
                        String s6 = null;
                        String s8 = null;
                        String s9 = null;
                        if(helpspecnode.needHelpAreaRect())
                        {
                            RecordLayout recordlayout = getRecordLayout();
                            if(j == 296)
                            {
                                s3 = Integer.toString(recordlayout.getFirstRow());
                                s6 = "1";
                                s8 = Integer.toString(recordlayout.getLastRow());
                                s9 = Integer.toString(recordlayout.getScreenOrWindowWidth());
                            } else
                            {
                                for(FieldOutputEnumeration fieldoutputenumeration = recordlayout.getDisplayableFields(); fieldoutputenumeration.hasMoreElements();)
                                {
                                    IFieldOutput ifieldoutput = fieldoutputenumeration.nextFieldOutput();
                                    FieldNode fieldnode = ifieldoutput.getFieldNode();
                                    if(j != 297 ? j != 298 || !fieldnode.isNamed() && fieldnode.getHelpId() == helpspecnode.getFieldId() : !fieldnode.isUnnamedConstantField() && fieldnode.getName().equals(helpspecnode.getField()))
                                    {
                                        s3 = Integer.toString(ifieldoutput.getRow());
                                        s6 = Integer.toString(ifieldoutput.getColumn());
                                        s8 = Integer.toString((ifieldoutput.getRow() + ifieldoutput.getHeight()) - 1);
                                        s9 = Integer.toString((ifieldoutput.getColumn() + ifieldoutput.getWidth()) - 1);
                                        break;
                                    }
                                }

                            }
                        } else
                        {
                            StringTokenizer stringtokenizer1 = new StringTokenizer(helpspecnode.getRectangleAsString(), ", \t\n\r\f");
                            s3 = stringtokenizer1.nextToken();
                            s6 = stringtokenizer1.nextToken();
                            s8 = stringtokenizer1.nextToken();
                            s9 = stringtokenizer1.nextToken();
                        }
                        XMLElement xmlelement4 = new XMLElement("helparea");
                        xmlelement4.addAttribute("top", s3);
                        xmlelement4.addAttribute("left", s6);
                        xmlelement4.addAttribute("bottom", s8);
                        xmlelement4.addAttribute("right", s9);
                        if(j == 297)
                        {
                            XMLElement xmlelement5 = new XMLElement("field");
                            xmlelement5.addAttribute("fieldname", helpspecnode.getField());
                            if(helpspecnode.getFieldChoice() > 0)
                                xmlelement5.addAttribute("fieldchoice", Integer.toString(helpspecnode.getFieldChoice()));
                            xmlelement4.add(xmlelement5);
                        }
                        XMLElement xmlelement6 = new XMLElement("definition");
                        String s10 = i != 117 ? "HelpPanelGroup" : "HelpRecord";
                        xmlelement6.addAttribute("type", s10);
                        xmlelement6.addAttribute("recordname", recordnode.getName());
                        xmlelement6.addAttribute("helpspecname", WebfacingConstants.trimQuotes(helpspecnode.getName()));
                        if(helpspecnode.getHelpObj() != null)
                            xmlelement6.addAttribute("object", helpspecnode.getHelpObj());
                        if(helpspecnode.getHelpLib() != null)
                            xmlelement6.addAttribute("library", helpspecnode.getHelpLib());
                        if(helpspecnode.getIndicatorString() != null)
                            xmlelement6.addAttribute("indicator", helpspecnode.getIndicatorString());
                        xmlelement4.add(xmlelement6);
                        if(helpspecnode.isBoundary())
                        {
                            KeywordNode keywordnode6 = helpspecnode.findKeywordById(109);
                            String s11 = keywordnode6.getIndicatorString();
                            XMLElement xmlelement7 = new XMLElement("helpboundary");
                            xmlelement7.addAttribute("id", "KWD_HLPBDY");
                            if(s11 != null)
                                xmlelement7.addAttribute("indicator", s11);
                            xmlelement4.add(xmlelement7);
                        }
                        if(helpspecnode.isExcluded())
                        {
                            KeywordNode keywordnode7 = helpspecnode.findKeywordById(113);
                            String s12 = keywordnode7.getIndicatorString();
                            XMLElement xmlelement8 = new XMLElement("helpexcluded");
                            xmlelement8.addAttribute("id", "KWD_HLPEXCLD");
                            if(s12 != null)
                                xmlelement8.addAttribute("indicator", s12);
                            xmlelement4.add(xmlelement8);
                        }
                        xmlelement.add(xmlelement4);
                    }
                }
            }
        KeywordNode keywordnode4 = filenode.findKeywordById(117);
        if(keywordnode4 == null)
            keywordnode4 = filenode.findKeywordById(116);
        if(keywordnode4 != null)
        {
            XMLElement xmlelement1 = new XMLElement("helparea");
            XMLElement xmlelement2 = new XMLElement("definition");
            String s4 = keywordnode4.getKeywordId() != 117 ? "HelpPanelGroup" : "HelpRecord";
            xmlelement2.addAttribute("type", s4);
            xmlelement2.addAttribute("recordname", recordnode.getName());
            Object obj = null;
            Vector vector = keywordnode4.getParmsVector();
            switch(vector.size())
            {
            case 2: // '\002'
                StringTokenizer stringtokenizer = new StringTokenizer(((KeywordParm)vector.elementAt(1)).getVarString(), "/");
                if(stringtokenizer.countTokens() == 2)
                    xmlelement2.addAttribute("library", stringtokenizer.nextToken());
                xmlelement2.addAttribute("object", stringtokenizer.nextToken());
                // fall through

            case 1: // '\001'
                String s7 = ((KeywordParm)vector.elementAt(0)).getVarString();
                s7 = WebfacingConstants.trimQuotes(s7);
                xmlelement2.addAttribute("helpspecname", s7);
                break;
            }
            if(keywordnode4.getIndicatorString() != null)
                xmlelement2.addAttribute("indicator", keywordnode4.getIndicatorString());
            xmlelement1.add(xmlelement2);
            xmlelement.add(xmlelement1);
        }
        for(RecordNodeEnumeration recordnodeenumeration = filenode.getRecords(); recordnodeenumeration.hasMoreElements();)
        {
            RecordNode recordnode1 = (RecordNode)recordnodeenumeration.nextElement();
            String s5 = recordnode1.getName();
            KeywordNode keywordnode5 = recordnode1.findKeywordById(120);
            if(keywordnode5 != null)
            {
                Vector vector1 = keywordnode5.getParmsVector();
                XMLElement xmlelement3 = new XMLElement("helpgroup");
                xmlelement3.addAttribute("name", ((KeywordParm)vector1.elementAt(0)).getVarString());
                xmlelement3.addAttribute("recordname", s5);
                xmlelement3.addAttribute("sequence", Short.toString(((KeywordParm)vector1.elementAt(1)).getVarNumber()));
                xmlelement.add(xmlelement3);
            }
        }

        return xmlelement;
    }

    protected IXMLComponent generateFeedbackElement()
    {
        XMLElement xmlelement = new XMLElement("feedback");
        xmlelement.add(generateFeedbackIndicatorsElement());
        xmlelement.add(generateFeedbackRTNCSRLOCElement());
        return xmlelement;
    }

    protected IXMLComponent generateFeedbackIndicatorsElement()
    {
        XMLElement xmlelement = new XMLElement("indicators");
        ResponseIndicatorList responseindicatorlist = new ResponseIndicatorList();
        responseindicatorlist.populateFrom(getFileNode());
        for(Iterator iterator = responseindicatorlist.getList().iterator(); iterator.hasNext(); xmlelement.add(generateFeedbackResponseIndicatorElement((ResponseIndicatorList.ResponseIndicator)iterator.next(), getFileNode())));
        ResponseIndicatorList responseindicatorlist1 = new ResponseIndicatorList();
        responseindicatorlist1.populateFrom(getRecordNode());
        for(Iterator iterator1 = responseindicatorlist1.getList().iterator(); iterator1.hasNext(); xmlelement.add(generateFeedbackResponseIndicatorElement((ResponseIndicatorList.ResponseIndicator)iterator1.next(), getRecordNode())));
        for(FieldNodeEnumeration fieldnodeenumeration = getRecordNode().getFields(); fieldnodeenumeration.hasMoreElements();)
        {
            FieldNode fieldnode = fieldnodeenumeration.nextField();
            ResponseIndicatorList responseindicatorlist2 = new ResponseIndicatorList();
            responseindicatorlist2.populateFrom(fieldnode);
            for(Iterator iterator2 = responseindicatorlist2.getList().iterator(); iterator2.hasNext(); xmlelement.add(generateFeedbackResponseIndicatorElement((ResponseIndicatorList.ResponseIndicator)iterator2.next(), fieldnode)));
        }

        return xmlelement;
    }

    protected IXMLComponent generateFeedbackResponseIndicatorElement(ResponseIndicatorList.ResponseIndicator responseindicator, AnyNodeWithKeywords anynodewithkeywords)
    {
        XMLElement xmlelement = new XMLElement();
        if(responseindicator.getKeyword() == 176 || responseindicator.getKeyword() == 177 || responseindicator.getKeyword() == 99 || responseindicator.getKeyword() == 100 || responseindicator.getKeyword() == 195 || responseindicator.getKeyword() == 196 || responseindicator.getKeyword() == 144)
            return null;
        switch(responseindicator.getKeyword())
        {
        case 223: 
            xmlelement.setName("anyaidkeyresponse");
            break;

        case 62: // '>'
            if(anynodewithkeywords instanceof RecordNode)
            {
                xmlelement.setName("anyfieldresponse");
                break;
            }
            if(anynodewithkeywords instanceof FieldNode)
            {
                xmlelement.setName("fieldresponse");
                xmlelement.addAttribute("name", anynodewithkeywords.getWebName());
            } else
            {
                ExportHandler.err(1, "CHANGE keyword outside of record or field node!");
            }
            break;

        case 11: // '\013'
            if(anynodewithkeywords instanceof FieldNode)
            {
                xmlelement.setName("blanksresponse");
                xmlelement.addAttribute("name", anynodewithkeywords.getWebName());
            } else
            {
                ExportHandler.err(1, "BLANKS keyword outside of field node!");
            }
            break;

        case 92: // '\\'
            xmlelement.setName("response");
            break;

        case 118: // 'v'
            xmlelement.setName("hlprtnresponse");
            if(responseindicator.getIndExpr() != null)
                xmlelement.addAttribute("indexpr", responseindicator.getIndExpr());
            break;

        default:
            xmlelement.setName("aidkeyresponse");
            xmlelement.addAttribute("name", responseindicator.getName());
            break;
        }
        xmlelement.addAttribute("indicator", Integer.toString(responseindicator.getIndicator()));
        return xmlelement;
    }

    protected IXMLComponent generateFeedbackRTNCSRLOCElement()
    {
        XMLElement xmlelement = new XMLElement("rtncsrloc");
        KeywordNodeEnumeration keywordnodeenumeration = getRecordNode().getKeywordsOfType(174);
        for(int i = 1; keywordnodeenumeration.hasMoreElements(); i++)
        {
            KeywordNode keywordnode = keywordnodeenumeration.nextKeyword();
            int j = 0;
            KeywordParm keywordparm = keywordnode.getParm(j);
            boolean flag = true;
            switch(keywordparm.getVarParmToken())
            {
            case 330: 
                boolean flag1 = false;
                keywordparm = null;
                break;

            case 329: 
                XMLElement xmlelement1 = new XMLElement("window");
                keywordparm = keywordnode.getParm(++j);
                String s = keywordparm.getVarString().substring(1);
                try
                {
                    s = WebfacingConstants.replaceSpecialCharacters(s);
                }
                catch(Throwable throwable)
                {
                    keywordnode.logEvent(98, new String[] {
                        "Error replacing special characters for string: " + s + " = " + throwable
                    });
                    ExportHandler.err(2, "Error replacing special characters for string: " + s);
                }
                xmlelement1.addAttribute("absoluterowfield", s);
                keywordparm = keywordnode.getParm(++j);
                s = keywordparm.getVarString().substring(1);
                try
                {
                    s = WebfacingConstants.replaceSpecialCharacters(s);
                }
                catch(Throwable throwable1)
                {
                    keywordnode.logEvent(98, new String[] {
                        "Error replacing special characters for string: " + s + " = " + throwable1
                    });
                    ExportHandler.err(2, "Error replacing special characters for string: " + s);
                }
                xmlelement1.addAttribute("absolutecolumnfield", s);
                keywordparm = keywordnode.getParm(++j);
                if(keywordparm != null)
                {
                    String s1 = keywordparm.getVarString().substring(1);
                    try
                    {
                        s1 = WebfacingConstants.replaceSpecialCharacters(s1);
                    }
                    catch(Throwable throwable2)
                    {
                        keywordnode.logEvent(98, new String[] {
                            "Error replacing special characters for string: " + s1 + " = " + throwable2
                        });
                        ExportHandler.err(2, "Error replacing special characters for string: " + s1);
                    }
                    xmlelement1.addAttribute("windowrowfield", s1);
                    keywordparm = keywordnode.getParm(++j);
                }
                if(keywordparm != null)
                {
                    String s2 = keywordparm.getVarString().substring(1);
                    try
                    {
                        s2 = WebfacingConstants.replaceSpecialCharacters(s2);
                    }
                    catch(Throwable throwable3)
                    {
                        keywordnode.logEvent(98, new String[] {
                            "Error replacing special characters for string: " + s2 + " = " + throwable3
                        });
                        ExportHandler.err(2, "Error replacing special characters for string: " + s2);
                    }
                    xmlelement1.addAttribute("windowcolumnfield", s2);
                    keywordparm = keywordnode.getParm(++j);
                }
                xmlelement.add(xmlelement1);
                break;

            case 328: 
                keywordparm = keywordnode.getParm(++j);
                // fall through

            default:
                XMLElement xmlelement2 = new XMLElement("recname");
                String s3 = keywordparm.getVarString().substring(1);
                try
                {
                    s3 = WebfacingConstants.replaceSpecialCharacters(s3);
                }
                catch(Throwable throwable4)
                {
                    keywordnode.logEvent(98, new String[] {
                        "Error replacing special characters for string: " + s3 + " = " + throwable4
                    });
                    ExportHandler.err(2, "Error replacing special characters for string: " + s3);
                }
                xmlelement2.addAttribute("recordnamefield", s3);
                keywordparm = keywordnode.getParm(++j);
                s3 = keywordparm.getVarString().substring(1);
                try
                {
                    s3 = WebfacingConstants.replaceSpecialCharacters(s3);
                }
                catch(Throwable throwable5)
                {
                    keywordnode.logEvent(98, new String[] {
                        "Error replacing special characters for string: " + s3 + " = " + throwable5
                    });
                    ExportHandler.err(2, "Error replacing special characters for string: " + s3);
                }
                xmlelement2.addAttribute("fieldnamefield", s3);
                keywordparm = keywordnode.getParm(++j);
                if(keywordparm != null)
                {
                    String s4 = keywordparm.getVarString().substring(1);
                    try
                    {
                        s4 = WebfacingConstants.replaceSpecialCharacters(s4);
                    }
                    catch(Throwable throwable6)
                    {
                        keywordnode.logEvent(98, new String[] {
                            "Error replacing special characters for string: " + s4 + " = " + throwable6
                        });
                        ExportHandler.err(2, "Error replacing special characters for string: " + s4);
                    }
                    xmlelement2.addAttribute("cursorposfield", s4);
                    keywordparm = keywordnode.getParm(++j);
                }
                xmlelement.add(xmlelement2);
                break;
            }
        }

        return xmlelement;
    }

    private Vector getReferencedOptionIndicators()
    {
        if(_optionIndicators != null)
            return _optionIndicators;
        Vector vector = new Vector();
        try
        {
            RecordNode recordnode = getRecordNode();
            StringBuffer stringbuffer = new StringBuffer();
            getReferencedOptionIndicatorsFromKeywords(getFileNode(), stringbuffer);
            getReferencedOptionIndicatorsFromKeywords(recordnode, stringbuffer);
            Iterator iterator = recordnode.getHelpspecs();
            if(iterator != null)
            {
                HelpspecNode helpspecnode;
                for(; iterator.hasNext(); getReferencedOptionIndicatorsFromKeywords(helpspecnode, stringbuffer))
                    helpspecnode = (HelpspecNode)iterator.next();

            }
            FieldNode fieldnode;
            for(FieldNodeEnumeration fieldnodeenumeration = recordnode.getFields(); fieldnodeenumeration.hasMoreElements(); getReferencedOptionIndicatorsFromKeywords(fieldnode, stringbuffer))
            {
                fieldnode = fieldnodeenumeration.nextField();
                String s1 = fieldnode.getIndicatorString();
                if(s1 != null)
                    stringbuffer.append(' ').append(s1);
            }

            String s = stringbuffer.toString();
            if(s.length() > 0)
            {
                for(StringTokenizer stringtokenizer = new StringTokenizer(s, " \t\n\r\fNO"); stringtokenizer.hasMoreTokens();)
                {
                    String s2 = stringtokenizer.nextToken();
                    if(s2.charAt(0) == '0')
                        s2 = s2.substring(1);
                    if(!vector.contains(s2))
                        vector.addElement(s2);
                }

            }
        }
        catch(Throwable throwable)
        {
            getRecordNode().logEvent(98, new String[] {
                "Error with optioned indicators in node: " + getRecordNode().getName() + " = " + throwable
            });
            ExportHandler.err(1, "error in XMLDefinitionGenerator.getReferencedOptionIndicators() while generating " + getBeanName() + " = " + throwable);
            ExportHandler.err(3, throwable);
        }
        _optionIndicators = vector;
        return _optionIndicators;
    }

    private void getReferencedOptionIndicatorsFromKeywords(AnyNodeWithKeywords anynodewithkeywords, StringBuffer stringbuffer)
    {
        try
        {
            Vector vector = anynodewithkeywords.getKeywordsVector();
            if(null != vector)
            {
                for(int i = 0; i < vector.size(); i++)
                {
                    String s = ((KeywordNode)vector.elementAt(i)).getIndicatorString();
                    if(s != null)
                        stringbuffer.append(' ').append(s);
                }

            }
        }
        catch(Throwable throwable)
        {
            if(anynodewithkeywords != null)
                anynodewithkeywords.logEvent(98, new String[] {
                    "Error with optioned indicators in node: " + anynodewithkeywords.getName() + " = " + throwable
                });
            ExportHandler.err(1, "error in XMLDefinitionGenerator.getReferencedOptionIndicatorsFromKeywords() while generating " + getBeanName() + " = " + throwable);
            ExportHandler.err(3, throwable);
        }
    }

    protected void accumulateInputFieldLength(char c, int i)
    {
        if(c == 'I' || c == 'B')
            _inputFieldLengthAccumulator += i;
    }

    protected void accumulateOutputFieldLength(char c, int i, boolean flag)
    {
        if((c == 'O' || c == 'B') && !flag)
            _outputFieldLengthAccumulator += i;
    }

    private void updateRecordStringMatchedKeyLabelList(FieldOutput fieldoutput)
    {
        try
        {
            _visibleCommandKeyLabelList.mergeList(fieldoutput.getCommandKeyLabels());
            _visibilityCondtionedKeyLabelList.mergeConditionedLabelList(fieldoutput.getVisibilityConditonedCommandKeyLabels());
        }
        catch(Throwable throwable)
        {
            getRecordNode().logEvent(98, new String[] {
                "Error merging command key label lists in node: " + getRecordNode().getName() + " = " + throwable
            });
            ExportHandler.err(1, "error in XMLDefinitionGenerator.updateRecordStringMatchedKeyLabelList() while generating " + getBeanName() + " = " + throwable);
        }
    }

    private CommandKeyLabelList getMergedCommandKeyLabelList(CommandKeyLabelList commandkeylabellist, CommandKeyLabelList commandkeylabellist1)
    {
        try
        {
            commandkeylabellist1.mergeList(commandkeylabellist);
        }
        catch(Throwable throwable)
        {
            getRecordNode().logEvent(98, new String[] {
                "Error merging command key label lists in node: " + getRecordNode().getName() + " = " + throwable
            });
            ExportHandler.err(1, "error in XMLDefinitionGenerator.getMergedCommandKeyLabelList() while generating " + getBeanName() + " = " + throwable);
        }
        return commandkeylabellist1;
    }

    private CommandKeyLabelList getCommandKeyLabelListFromNode(AnyNodeWithKeywords anynodewithkeywords)
    {
        CommandKeyLabelList commandkeylabellist = new CommandKeyLabelList();
        try
        {
            Vector vector = anynodewithkeywords.getKeywordsVector();
            Vector vector1 = new Vector();
            if(vector != null)
            {
                for(int i = 0; i < vector.size();)
                {
                    KeywordNode keywordnode = (KeywordNode)vector.elementAt(i);
                    switch(keywordnode.getKeywordId())
                    {
                    case 14: // '\016'
                    case 15: // '\017'
                    case 16: // '\020'
                    case 17: // '\021'
                    case 18: // '\022'
                    case 19: // '\023'
                    case 20: // '\024'
                    case 21: // '\025'
                    case 22: // '\026'
                    case 23: // '\027'
                    case 24: // '\030'
                    case 25: // '\031'
                    case 26: // '\032'
                    case 27: // '\033'
                    case 28: // '\034'
                    case 29: // '\035'
                    case 30: // '\036'
                    case 31: // '\037'
                    case 32: // ' '
                    case 33: // '!'
                    case 34: // '"'
                    case 35: // '#'
                    case 36: // '$'
                    case 37: // '%'
                    case 38: // '&'
                    case 39: // '\''
                    case 40: // '('
                    case 41: // ')'
                    case 42: // '*'
                    case 43: // '+'
                    case 44: // ','
                    case 45: // '-'
                    case 46: // '.'
                    case 47: // '/'
                    case 48: // '0'
                    case 49: // '1'
                    case 50: // '2'
                    case 51: // '3'
                    case 52: // '4'
                    case 53: // '5'
                    case 54: // '6'
                    case 55: // '7'
                    case 56: // '8'
                    case 57: // '9'
                    case 58: // ':'
                    case 59: // ';'
                    case 60: // '<'
                    case 61: // '='
                        String s = keywordnode.getName();
                        String s2 = null;
                        int j = 0;
                        KeywordParm keywordparm = keywordnode.getParm(j);
                        if(keywordparm != null)
                            keywordparm = keywordnode.getParm(++j);
                        if(keywordparm != null && keywordparm.getVarString() != null)
                        {
                            s2 = keywordparm.getVarString();
                            if(s2 == null)
                                s2 = new String("");
                            else
                                s2 = keywordparm.getVarStringUnquoted();
                        }
                        if(s != null && s2 != null)
                        {
                            CommandKeyLabel commandkeylabel = new CommandKeyLabel(s, s2, 1);
                            if(commandkeylabel != null)
                                commandkeylabellist.add(commandkeylabel);
                        }
                        vector1.addElement(keywordnode);
                        // fall through

                    default:
                        i++;
                        break;
                    }
                }

            }
            if(anynodewithkeywords.hasWebSettings())
            {
                WebSettingsNodeEnumeration websettingsnodeenumeration = anynodewithkeywords.getWebSettings();
                Object obj = null;
                while(websettingsnodeenumeration.hasMoreElements()) 
                {
                    WebSettingsNode websettingsnode = websettingsnodeenumeration.nextWebSettings();
                    int k = websettingsnode.getType();
                    String s1 = websettingsnode.getValue();
                    if(k == 9)
                    {
                        StringTokenizer stringtokenizer = new StringTokenizer(s1, "|");
                        if(stringtokenizer.countTokens() > 0)
                            while(stringtokenizer.hasMoreTokens()) 
                            {
                                String s3 = (String)stringtokenizer.nextElement();
                                int l = s3.indexOf("=");
                                String s4 = null;
                                String s5 = null;
                                if(l >= 0)
                                {
                                    s4 = s3.substring(0, l);
                                    if(Integer.parseInt(s4) < 10)
                                        s4 = "0" + s4;
                                    if(s3.length() > l + 1)
                                        s5 = s3.substring(l + 1);
                                    else
                                        s5 = new String("");
                                }
                                if(s4 != null && s5 != null)
                                {
                                    CommandKeyLabel commandkeylabel1 = new CommandKeyLabel(s4, s5, 3);
                                    if(commandkeylabel1 != null)
                                        commandkeylabellist.add(commandkeylabel1);
                                }
                            }
                    }
                }
            }
        }
        catch(Throwable throwable)
        {
            if(anynodewithkeywords != null)
                anynodewithkeywords.logEvent(98, new String[] {
                    "Error getting command key label list from node: " + anynodewithkeywords.getName() + " = " + throwable
                });
            ExportHandler.err(1, "error in XMLDefinitionGenerator.getCommandKeyLabelListFromNode() while generating " + getBeanName() + " = " + throwable);
        }
        return commandkeylabellist;
    }

    private void findCommandKeyKeywords(AnyNodeWithKeywords anynodewithkeywords, KeySequence keysequence)
    {
        try
        {
            Vector vector = anynodewithkeywords.getKeywordsVector();
            if(vector != null)
            {
                for(int i = 0; i < vector.size(); i++)
                {
                    KeywordNode keywordnode = (KeywordNode)vector.elementAt(i);
                    switch(keywordnode.getKeywordId())
                    {
                    case 14: // '\016'
                    case 15: // '\017'
                    case 16: // '\020'
                    case 17: // '\021'
                    case 18: // '\022'
                    case 19: // '\023'
                    case 20: // '\024'
                    case 21: // '\025'
                    case 22: // '\026'
                    case 23: // '\027'
                    case 24: // '\030'
                    case 25: // '\031'
                    case 26: // '\032'
                    case 27: // '\033'
                    case 28: // '\034'
                    case 29: // '\035'
                    case 30: // '\036'
                    case 31: // '\037'
                    case 32: // ' '
                    case 33: // '!'
                    case 34: // '"'
                    case 35: // '#'
                    case 36: // '$'
                    case 37: // '%'
                    case 38: // '&'
                    case 39: // '\''
                    case 40: // '('
                    case 41: // ')'
                    case 42: // '*'
                    case 43: // '+'
                    case 44: // ','
                    case 45: // '-'
                    case 46: // '.'
                    case 47: // '/'
                    case 48: // '0'
                    case 49: // '1'
                    case 50: // '2'
                    case 51: // '3'
                    case 52: // '4'
                    case 53: // '5'
                    case 54: // '6'
                    case 55: // '7'
                    case 56: // '8'
                    case 57: // '9'
                    case 58: // ':'
                    case 59: // ';'
                    case 60: // '<'
                    case 61: // '='
                        keysequence.addCommandKey(new ReferencedAIDKey(keywordnode));
                        break;

                    case 185: 
                    case 190: 
                        keysequence.addCommandKey(new ReferencedAIDKey(keywordnode));
                        break;
                    }
                }

            }
        }
        catch(Throwable throwable)
        {
            if(anynodewithkeywords != null)
                anynodewithkeywords.logEvent(98, new String[] {
                    "Error with command keys in node: " + anynodewithkeywords.getName() + " = " + throwable
                });
            ExportHandler.err(1, "error in XMLDefinitionGenerator.findCommandKeyKeywords() while generating " + getBeanName() + " = " + throwable);
        }
    }

    private void findFunctionKeyKeywords(AnyNodeWithKeywords anynodewithkeywords, KeySequence keysequence)
    {
        try
        {
            Vector vector = anynodewithkeywords.getKeywordsVector();
            if(vector != null)
            {
                for(int i = 0; i < vector.size(); i++)
                {
                    KeywordNode keywordnode = (KeywordNode)vector.elementAt(i);
                    switch(keywordnode.getKeywordId())
                    {
                    default:
                        break;

                    case 73: // 'I'
                    case 107: // 'k'
                    case 123: // '{'
                    case 155: 
                    case 156: 
                    case 172: 
                    case 173: 
                        keysequence.addFunctionKey(new ReferencedAIDKey(keywordnode));
                        break;

                    case 158: 
                        KeywordParm keywordparm = keywordnode.getFirstParm();
                        if(keywordparm != null && (keywordparm.getParmType() == 2 || keywordparm.getParmType() == 23))
                            keysequence.addFunctionKey(new ReferencedAIDKey(keywordnode));
                        break;
                    }
                }

            }
        }
        catch(Throwable throwable)
        {
            if(anynodewithkeywords != null)
                anynodewithkeywords.logEvent(98, new String[] {
                    "Error with function keys in node: " + anynodewithkeywords.getName() + " = " + throwable
                });
            ExportHandler.err(1, "error in XMLDefinitionGenerator.findFunctionKeyKeywords() while generating " + getBeanName() + " = " + throwable);
        }
    }

    protected ResponseIndicatorList getResponseIndicators()
    {
        if(_responseIndicators == null)
        {
            _responseIndicators = new ResponseIndicatorList();
            _responseIndicators.populateFrom(getFileNode());
            _responseIndicators.populateFrom(getRecordNode());
            IFieldOutput ifieldoutput;
            for(FieldOutputEnumeration fieldoutputenumeration = getRecordLayout().getAllFields(); fieldoutputenumeration.hasMoreElements(); _responseIndicators.populateFrom(ifieldoutput.getFieldNode()))
                ifieldoutput = fieldoutputenumeration.nextFieldOutput();

        }
        return _responseIndicators;
    }

    protected String getBeanName()
    {
        return getRecordNode().getWebName();
    }

    protected String getBeanType()
    {
        return "REC";
    }

    protected FileNode getFileNode()
    {
        if(_fileNode == null)
            _fileNode = (FileNode)_rn.getParent();
        return _fileNode;
    }

    protected WebResourceFileWriter getFileWriter()
    {
        return _fileWriter;
    }

    protected RecordLayout getRecordLayout()
    {
        return _recLayout;
    }

    protected RecordNode getRecordNode()
    {
        return _rn;
    }

    static final String copyRight = "(c) Copyright IBM Corporation 2003. All Rights Reserved";
    static final String BEAN_TYPE = "REC";
    private RecordNode _rn;
    private RecordLayout _recLayout;
    private WebResourceFileWriter _fileWriter;
    private FileNode _fileNode;
    private ResponseIndicatorList _responseIndicators;
    private Vector _optionIndicators;
    protected long _inputFieldLengthAccumulator;
    protected long _outputFieldLengthAccumulator;
    private CommandKeyLabelList _defaultCommandKeyLabelList;
    private CommandKeyLabelList _definedKeyLabelList;
    private CommandKeyLabelList _visibilityCondtionedKeyLabelList;
    private CommandKeyLabelList _visibleCommandKeyLabelList;
    private CommandKeyLabelList _indicatorConditionedKeyLabelList;
    private KeyLabelsInPropertyFile _keyLabelsInPropertyFile;
}
